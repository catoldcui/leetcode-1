package cn.hjmao.leetcode.a037sudokusolver;

import org.testng.annotations.Test;

import static org.testng.Assert.*;

/**
 * Created by hjmao on 17-2-27.
 */
public class SolutionTest {
  private Solution solution = new Solution();

  @Test
  public void testSolveSudoku1() throws Exception {
    char[][] board = {
        {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
        {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
        {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
        {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
        {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
        {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
        {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
        {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
        {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
    };
    char[][] expected = {
        {'5', '3', '4', '6', '7', '8', '9', '1', '2'},
        {'6', '7', '2', '1', '9', '5', '3', '4', '8'},
        {'1', '9', '8', '3', '4', '2', '5', '6', '7'},
        {'8', '5', '9', '7', '6', '1', '4', '2', '3'},
        {'4', '2', '6', '8', '5', '3', '7', '9', '1'},
        {'7', '1', '3', '9', '2', '4', '8', '5', '6'},
        {'9', '6', '1', '5', '3', '7', '2', '8', '4'},
        {'2', '8', '7', '4', '1', '9', '6', '3', '5'},
        {'3', '4', '5', '2', '8', '6', '1', '7', '9'}
    };
    this.solution.solveSudoku(board);
    char[][] actual = board;

    for (int i = 0; i < 9; i++) {
      assertEquals(actual[i], expected[i]);
    }
  }

  @Test
  public void testSolveSudoku2() throws Exception {
    char[][] board = {
        {'.', '.', '9', '7', '4', '8', '.', '.', '.'},
        {'7', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '2', '.', '1', '.', '9', '.', '.', '.'},
        {'.', '.', '7', '.', '.', '.', '2', '4', '.'},
        {'.', '6', '4', '.', '1', '.', '5', '9', '.'},
        {'.', '9', '8', '.', '.', '.', '3', '.', '.'},
        {'.', '.', '.', '8', '.', '3', '.', '2', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '6'},
        {'.', '.', '.', '2', '7', '5', '9', '.', '.'}
    };
    char[][] expected = {
        {'5', '1', '9', '7', '4', '8', '6', '3', '2'},
        {'7', '8', '3', '6', '5', '2', '4', '1', '9'},
        {'4', '2', '6', '1', '3', '9', '8', '7', '5'},
        {'3', '5', '7', '9', '8', '6', '2', '4', '1'},
        {'2', '6', '4', '3', '1', '7', '5', '9', '8'},
        {'1', '9', '8', '5', '2', '4', '3', '6', '7'},
        {'9', '7', '5', '8', '6', '3', '1', '2', '4'},
        {'8', '3', '2', '4', '9', '1', '7', '5', '6'},
        {'6', '4', '1', '2', '7', '5', '9', '8', '3'}
    };
    this.solution.solveSudoku(board);
    char[][] actual = board;

    for (int i = 0; i < 9; i++) {
      assertEquals(actual[i], expected[i]);
    }
  }
}